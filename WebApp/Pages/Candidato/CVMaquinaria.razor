@*@page "/Candidato/Maquinaria/"
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Provider
@inject UserManager<IdentityUser> UserManager
@inject JornalerosApp.Shared.Services.ISQLDatabaseServices SQLDBServices


    <EditForm Model="PermisoData" >
        <BSCard CardType="CardType.Card">
            <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H5">Marca la casilla si posees los siguientes documentos:</BSCard>
            <BSCard CardType="CardType.Body" Alignment="Alignment.Center" style="height:300px!important">

                <BSBasicForm>
                    <BSFormGroup IsRow="true" Class="m-1">
                        <BSCol SM="5"><BSLabel Class="h5">Licencia de conducción de vehículos agrícolas</BSLabel></BSCol>

                        <BSCol>
                            <BSBasicInput InputType="InputType.Checkbox" Id="exampleRadios1" Value="PermisoChequeado.First()" ValueChanged="((bool e) => AñadirPermisos(e, PermisosConducir.First()))"></BSBasicInput>
                        </BSCol>

                    </BSFormGroup>
                    <hr />
                    <BSFormGroup>
                        <BSCol SM="12"> <BSLabel Class="h5">Permisos de conducir</BSLabel> </BSCol>
                        <BSRow Class="ml-3">
                            @foreach (var item in PermisosConducir.Skip(1))
                            {
                                <BSCol SM="2">
                                    <BSBasicInput InputType="InputType.Checkbox" Id="@item" IsChecked="false" Value="PermisoChequeado[PermisosConducir.IndexOf(item)]" ValueChanged="@((bool e)=> AñadirPermisos(e, item))"></BSBasicInput>
                                    <BSLabel For=@item>@item</BSLabel>
                                </BSCol>
                            }
                        </BSRow>
                    </BSFormGroup>
                </BSBasicForm>
                </BSCard>
                <br />
                <BSCard CardType="CardType.Footer">
                    <BSRow Class="fixed-bottom, float-right, ml-4, mr-4" style="display:block; margin:0; padding:0">
                        <ButonesFondo BackDisabled="false" Inicio="IrPaginaInicio" Atras=" IrTabAnterior" Listo="IrTabSiguiente"></ButonesFondo>
                    </BSRow>
                </BSCard>
            </BSCard>
    </EditForm>

@code {
    List<string> PermisosConducir { get; set; } = new List<string> { "LVA", "AM", "A", "A1", "A2", "B", "B+E", "C1", "C1+E", "C", "C+E", "D1", "D1+E", "D", "D+E" };
    bool[] PermisoChequeado { get; set; } = new bool[15];
    bool PermisoChequeado0 { get; set; }
    bool Afirmativo { get; set; } = false;
    string Id { get; set; }
    string UserName { get; set; }
    Permiso PermisoData { get; set; } = new Permiso();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await Provider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (Id == null)
            {
                Id = UserManager.GetUserId(user);
                UserName = user.Identity.Name;
            }
            PermisoData = await SQLDBServices.PermisosPorIdPersona(Id);
            PermisoData = PermisoData ?? new Permiso { IdPermisos = Guid.NewGuid().ToString(), IdPersona = Id, Tipo = string.Empty };
        }catch(Exception exc)
        {
            Console.WriteLine(exc.Message);
            throw;
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        //PermisosConducir = new List<string> { "LVA", "AM", "A", "A1", "A2", "B", "B+E", "C1", "C1+E", "C", "C+E", "D1", "D1+E", "D", "D+E" };
        //PermisoChequeado = new bool[PermisosConducir.Count()];
        PermisoChequeado.Initialize();
        var permisos = PermisoData?.Tipo?.Split("|");
        if (permisos?.Count() > 0)
        {
            permisos.ToList().ForEach(p =>
            {
                if (PermisosConducir.IndexOf(p) != -1)
                {
                    PermisoChequeado[PermisosConducir.IndexOf(p)] = true;
                }
            });
        }
        await InvokeAsync(() => StateHasChanged());
    }

    async Task AñadirPermisos(bool e, string p)
    {
        PermisoData.Tipo = string.Empty;

        PermisoChequeado[PermisosConducir.IndexOf(p)] = e;

        foreach (var item in PermisoChequeado.ToList().Select((value, i) => (value, i)))
        {
            if (item.value)
            {
                PermisoData.Tipo = PermisoData.Tipo + PermisosConducir[item.i] + "|";
            }
        }

        //PermisoData.Tipo += PermisosConducir[PermisoChequeado.ToList().IndexOf(c)] + "|";

        if (PermisoData.Tipo.Length > 0)
        {
            PermisoData.Tipo = PermisoData.Tipo.Remove(PermisoData.Tipo.Length - 1);
        }

        await PermisoDataChanged();
    }

    async Task<bool> PermisoDataChanged()
    {
        try
        {
            var result = await SQLDBServices.UpdatePermisos(PermisoData);

            return result;
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc.Message);
            throw;
        }
    }

    async void IrPaginaInicio(MouseEventArgs args)
    {
        if (await PermisoDataChanged())
        {
            Navigation.NavigateTo("/Candidato");
        }
        await InvokeAsync(() => StateHasChanged());
    }

    async void IrTabAnterior(MouseEventArgs args)
    {
        if (await PermisoDataChanged())
        {
            Navigation.NavigateTo("/Candidato/Experiencia/");
        }
        await InvokeAsync(() => StateHasChanged());
    }

    async void IrTabSiguiente(MouseEventArgs args)
    {
        try
        {
            if (await PermisoDataChanged())
            {
                Navigation.NavigateTo("/Candidato/Formacion/");
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
            throw;
        }
    }
}*@
