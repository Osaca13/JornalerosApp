@page "/Candidato"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using JornalerosApp.Pages.Candidatos
@using JornalerosApp.Shared.Services
@inject AuthenticationStateProvider Provider
@inject IHttpClientFactory Factory;

@inject NavigationManager Navigation


@if (panel)
{   
    <BSContainer IsFluid="true">
        <BSCard Alignment="Alignment.Center">
            <BSCard CardType="CardType.Image" src="/images/campoSembrado.jpg" alt="Card image cap" />
            <BSCard CardType="CardType.Body">
                <BSCard CardType="CardType.Title">Perfil del Candidato</BSCard>
                <BSCard CardType="CardType.Text">With supporting text below as a natural lead-in to additional content.</BSCard>
                <BSRow>
                    <BSCol SMOffset="4">
                        <BSButton Class="m-4" Size="Size.ExtraLarge" ButtonType="ButtonType.Link" @onclick="IraCV">Datos personales</BSButton>
                        <BSButton Class="m-4" Size="Size.ExtraLarge" ButtonType="ButtonType.Link" @onclick="IraOfertas">Buscar ofertas</BSButton>
                    </BSCol>
                </BSRow>
            </BSCard>
        </BSCard>

    </BSContainer>
}
@if (dp)
{
    <EditarDP Id="@Id" OnValidSubmit="@CrearDatosUsuario" Persona="@Persona" Provincias="@Provincias" Municipios="@Municipios" OnProvinciaSelection="@ListarMunicipios" ></EditarDP>
}
@if (cv)
{
    <EditarCV Id="@Id" Persona="@Persona" OnClickCallBack="@PanelInicial"></EditarCV>
}

@code {
    [Parameter] public string UserName { get; set; }
    [Parameter] public string Id { get; set; }
    private Persona Persona { get; set; }
    private HttpClient client;
    private IEnumerable<string> Provincias { get; set; } = new List<string>();
    private IEnumerable<string> Municipios { get; set; } = new List<string>();
    private bool nuevo { get; set; }
    bool dp { get; set; } = false;
    bool panel { get; set; } = true;
    bool cv { get; set; } = false;
    bool eSelected { get; set;  }

    async void ListarMunicipios(string provincia)
    {        
        Municipios = await client.GetFromJsonAsync<IEnumerable<string>>("Provincias/" + provincia);

        await InvokeAsync(() => StateHasChanged());
    }

    void PanelInicial()
    {
        dp = false;
        panel = true;
        cv = false;
    }


    private void IraDP()
    {
        dp = true;
        panel = false;
        cv = false;
        //string direccion = "/Candidato/DatosPersonales/" + Id;

        //Navigation.NavigateTo(direccion);
    }

    private void IraCV()
    {
        dp = false;
        panel = false;
        cv = true;
        //string direccion = "/Candidato/CV/" + Id;

        //Navigation.NavigateTo(direccion);
    }

    private void IraOfertas()
    {

        Navigation.NavigateTo("/BuscarOfertas/" + "NO");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await Provider.GetAuthenticationStateAsync();
        var user = authState.User;
        client = Factory.CreateClient("clientFirst");
        try
        {
            Provincias = await client.GetFromJsonAsync<IEnumerable<string>>("Provincias");

            Persona = await client.GetFromJsonAsync<Persona>("Personas/" + Id);
            if (Persona.ProvinciaResidencia != null)
            {
                Municipios = await client.GetFromJsonAsync<IEnumerable<string>>("Provincias/" + Persona.ProvinciaResidencia);
            }

            if (Persona.CorreoElectronico == null)
            {
                nuevo = true;
                Persona = new Persona
                {
                    IdPersona = Id,
                    Nombre = string.Empty,
                    PrimerApellido = string.Empty,
                    Sexo = string.Empty,
                    CorreoElectronico = authState.User.Identity.Name
                };

            }
            await InvokeAsync(() => StateHasChanged());

        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc);
        }
    }

    async void CrearDatosUsuario()
    {
        
        await InvokeAsync(() => StateHasChanged());
        try
        {
            
            if (nuevo)
            {
                var respsta = await client.PostAsJsonAsync<Persona>("Personas", Persona);
                //if (respsta.IsSuccessStatusCode)
                //{
                //    Navigation.NavigateTo("/");
                //}
            }
            else
            {
                var estado = await client.PutAsJsonAsync<Persona>("Personas/" + Id, Persona);
                //if (estado.IsSuccessStatusCode)
                //{
                //    Navigation.NavigateTo("/");
                //}
            }
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc.Message);
            throw;
        }
    }

}
