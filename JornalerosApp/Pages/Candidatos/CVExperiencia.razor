@page "/Candidato/Experiencia/"
@inject JornalerosApp.Shared.Services.ISQLDatabaseServices SQLDBServices
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Provider
@inject UserManager<IdentityUser> UserManager

    <EditForm Model="ListaExperiencia">
       
        <BSCard CardType="CardType.Card">
            <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H5">Seleccione la máxima formación alcanzada:</BSCard>
            <BSCard CardType="CardType.Body" Alignment="Alignment.Center" style="height:315px!important">

                <BSTable>
                    <thead>
                        <tr>
                            @foreach (var item in Nivel1)
                            {
                                <th align="center">
                                    <BSBasicForm IsInline="true">
                                        <BSFormGroup IsCheck="true" IsRow="true">
                                            @if (experienciaData.FirstOrDefault(p => p.Categoria == item).IsChecked.Contains(true))
                                            {
                                                <BSCol> <BSLabel style="color: #2A26C3">@item</BSLabel></BSCol>
                                            }
                                            else
                                            {
                                                <BSCol> <BSLabel style="color: #070629">@item</BSLabel></BSCol>
                                            }
                                        </BSFormGroup>
                                    </BSBasicForm>
                                </th>
                                <th align="center"></th>
                            }
                        </tr>
                    </thead>
                    <tbody class="justify-content-center">
                        @if (experienciaData.Count() > 0)
                        {
                            @foreach (int jj in Enumerable.Range(0, 5))@*filas*@
                            {
                                <tr>
                                    @foreach (int ii in Enumerable.Range(0, 5))@*columnas*@
                                    {
                                        @if (experienciaData[ii].SubCategoria.Count > jj)
                                        {
                                            <td align="center">
                                                <BSBasicForm IsInline="true">
                                                    <BSFormGroup IsCheck="true" IsRow="true" Class="justify-content-center">
                                                        <BSCol><BSLabel>@experienciaData[ii].SubCategoria[jj]</BSLabel></BSCol>
                                                    </BSFormGroup>
                                                </BSBasicForm>
                                            </td>
                                            <td align="center">
                                                <BSBasicForm IsInline="true">
                                                    <BSFormGroup IsCheck="true" IsRow="true" Class="justify-content-center">
                                                        <BSCol><BSBasicInput Class="ml-3" InputType="InputType.Checkbox" Value="@experienciaData[ii].IsChecked[jj]" ValueChanged="@((bool e) => SelectNivel2(e, experienciaData[ii].Categoria, experienciaData[ii].SubCategoria[jj]))"></BSBasicInput></BSCol>
                                                    </BSFormGroup>
                                                </BSBasicForm>
                                            </td>
                                        }
                                        else
                                        {
                                            <td></td>
                                            <td></td>
                                        }
                                     }
                                </tr>
                             }
                         }
                    </tbody>
                </BSTable>
            </BSCard>
            <BSCard CardType="CardType.Footer">
                <BSRow Class="fixed-bottom, float-right, ml-4, mr-4" style="display:block; margin:0; padding:0">
                    <ButonesFondo BackDisabled="false" Inicio="IrPaginaInicio" Atras=" IrTabAnterior" Listo="IrTabSiguiente"></ButonesFondo>
                </BSRow>
            </BSCard>
        </BSCard>
    </EditForm>

@code {

    List<string> Nivel1 { get; set; } = new List<string>();
    string Id { get; set; }
    string UserName { get; set; }
    List<Experiencia> ListaExperiencia { get; set; } = new List<Experiencia>();
    Curriculum Curriculum { get; set; }
    Dictionary<string, bool> messages { get; set; } = new Dictionary<string, bool>();

    List<ExperienciaData> experienciaData { get; set; } = new List<ExperienciaData>();

    protected override void OnParametersSet()
    {
        Nivel1 = new List<string> { "Cosecha", "Poda", "Plantacion", "Cuidado", "Maquinaria" };

        experienciaData.Add(new ExperienciaData { Categoria = Nivel1[0], SubCategoria = new List<string> { "Frutales", "Viña", "Olivos", "Huerta", "Invernadero" }, IsChecked = new List<bool> { false, false, false, false, false } });
        experienciaData.Add(new ExperienciaData { Categoria = Nivel1[1], SubCategoria = new List<string> { "Frutales", "Viña", "Olivos" }, IsChecked = new List<bool> { false, false, false } });
        experienciaData.Add(new ExperienciaData { Categoria = Nivel1[2], SubCategoria = new List<string> { "Arboles", "Huerta", "Invernadero" }, IsChecked = new List<bool> { false, false, false } });
        experienciaData.Add(new ExperienciaData { Categoria = Nivel1[3], SubCategoria = new List<string> { "Frutales", "Viña", "Olivos", "Huerta", "Invernadero" }, IsChecked = new List<bool> { false, false, false, false, false } });
        experienciaData.Add(new ExperienciaData { Categoria = Nivel1[4], SubCategoria = new List<string> { "Tractor", "Cosechadora", "Toro" }, IsChecked = new List<bool> { false, false, false } });

        if (ListaExperiencia != null)
        {
            if (ListaExperiencia.Count() > 0)
            {
                foreach (var item in ListaExperiencia)
                {
                    var n1 = experienciaData.Find(p => p.Categoria == item.Puesto);
                    var n2 = n1.SubCategoria.FindIndex(p => p == item.DescripcionPuesto);
                    n1.IsChecked[n2] = true;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await Provider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (Id == null)
        {
            Id = UserManager.GetUserId(user);
            UserName = user.Identity.Name;
        }

        ListaExperiencia = await SQLDBServices.ExperienciaPorIdPersona(Id);
        Curriculum = await SQLDBServices.GetCurriculumPorIdPersona(Id);
        ListaExperiencia = ListaExperiencia ?? new List<Experiencia>();
        Curriculum = Curriculum ?? new Curriculum() { IdPersona = Id };

    }

    async Task<bool> NuevaExperiencia(bool e, string item)
    {
        //var n1 = experienciaData.Find(p => p.Categoria == item);
        //var puesto = ListaExperiencia.FindAll(p => p.Puesto == item);
        //if (puesto.Count() == 0)
        //{
        //    ListaExperiencia.Add(new Experiencia { IdExperiencia = Guid.NewGuid().ToString(), Puesto = item });
        //}
        await InvokeAsync(() => StateHasChanged());
        return e;
    }

    async Task SelectNivel2(bool e, string categoria, string subcategoria)
    {
        try
        {
            var index = experienciaData.Find(p => p.Categoria == categoria).SubCategoria.IndexOf(subcategoria);
            experienciaData.Find(p => p.Categoria == categoria).IsChecked[index] = e;

            if (e)
            {
                if (!ListaExperiencia.Any(p => p.Puesto == categoria & p.DescripcionPuesto == subcategoria))
                {
                    var nueva = new Experiencia
                    {
                        IdExperiencia = Guid.NewGuid().ToString(),
                        IdPersona = Id,
                        IdPersonaNavigation = Curriculum,
                        Puesto = categoria,
                        DescripcionPuesto = subcategoria
                    };

                    ListaExperiencia.Add(nueva);
                }
            }
            else
            {
                if (ListaExperiencia.Any(p => p.Puesto == categoria & p.DescripcionPuesto == subcategoria))
                {
                    ListaExperiencia.Remove(ListaExperiencia.FirstOrDefault(p => p.Puesto == categoria & p.DescripcionPuesto == subcategoria));
                }
            }
            await InvokeAsync(() => StateHasChanged());
            await ListaExperienciaChanged();
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
            throw;
        }
    }

    async Task<bool> ListaExperienciaChanged()
    {
        bool[] tryValidateList = new bool[ListaExperiencia.Count()];
        try
        {
            var oldExperiencia = await SQLDBServices.ExperienciaPorIdPersona(Id);
            if(oldExperiencia != null)
            {
                foreach (var item in oldExperiencia)
                {
                    await SQLDBServices.DeleteExperiencia(item);
                }
            }

            foreach (var item in ListaExperiencia)
            {
                tryValidateList[ListaExperiencia.IndexOf(item)] = await SQLDBServices.AddExperiencia(item);

            }
            return !tryValidateList.Contains(false);
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc.Message);
            throw;
        }
    }

    public class ExperienciaData
    {
        public ExperienciaData()
        {
            this.SubCategoria = new List<string>();
            this.IsChecked = new List<bool>();
        }
        public string Categoria { get; set; }
        public List<string> SubCategoria { get; set; }
        public List<bool> IsChecked { get; set; }
    }

    async void IrPaginaInicio(MouseEventArgs args)
    {
        if(await ListaExperienciaChanged())
        {
            Navigation.NavigateTo("/Candidato");
        }
    }

    async void IrTabAnterior(MouseEventArgs args)
    {
        if (await ListaExperienciaChanged())
        {

            Navigation.NavigateTo("/Candidato/DatosPersonales/");
        }
    }

    async void IrTabSiguiente(MouseEventArgs args)
    {
        try
        {
            if (await ListaExperienciaChanged())
            {
                Navigation.NavigateTo("/Candidato/Maquinaria/");
            }
        }catch(Exception exc)
        {
            Console.WriteLine(exc.Message);
            throw;
        }
    }
}
