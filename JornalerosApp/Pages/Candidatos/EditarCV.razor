@page "/Candidato/CV/{id}"
@page "/Candidato/CV"
@using JornalerosApp.Shared.Models
@using JornalerosApp.Pages.Candidatos
@using JornalerosApp.Pages.Curriculum
@using BlazorDateRangePicker
@inject AuthenticationStateProvider Provider
@inject IHttpClientFactory Factory;
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject JornalerosApp.Shared.Services.ISQLDatabaseServices SQLDBServices


<BSContainer IsFluid="true">
    <BSTabGroup @ref="refTabGroup">
        <BSTabList IsList="true" IsFill="true" Class="nav-justified" Alignment="Alignment.Center" @ref="refTabList">
            <BSTab Id="DatosPersonales" @ref="refDatosPersonales">
                <BSTabLabel Class="small">Datos Personales</BSTabLabel>

                <BSTabContent>
                    <BSRow style="height:370px!important">
                        @*<EditarDP Persona="@Persona" Id="@Id" Municipios="@Municipios" Provincias="@Provincias" ProvinciaSelection="@MunicipioSegunProvincia" PersonaChanged="PersonaChanged"></EditarDP>*@
                    </BSRow>
                    <br />
                    <BSRow Class="fixed-bottom, float-right, ml-4, mr-4">
                        <ButonesFondo Navigation="@Navigation" Inicio="IrPaginaInicio" Atras="@(() => IrTabAnterior(refDatosPersonales))" Listo="@(() => IrTabSiguiente(refDatosPersonales))"></ButonesFondo>
                    </BSRow>
                </BSTabContent>
            </BSTab>
            <BSTab @ref="refExperiencia" Id="Experiencia" Name="ExperienciaName">
                <BSTabLabel Class="small">Experiencia Laboral</BSTabLabel>
                <BSTabContent>
                    <BSRow style="height:370px!important">
                        <BSBasicForm style="width:100%; padding-left:3%; padding-right:1%; padding-top:1%">
                            <BSFormGroup IsRow="true" Class="m-0">
                                <BSCol SM="5"> <BSLabel For="experienciaCampo">¿Tienes experiencia en labores de campo?</BSLabel></BSCol>
                                <BSCol> <BSBasicInput Class="ml-3" InputType="InputType.Checkbox" Id="experienciaCampo" Value="@VisibleExperiencia" ValueChanged="@((bool e) => NuevaExperiencia(e))"></BSBasicInput></BSCol>
                            </BSFormGroup>
                        </BSBasicForm>
                        @if (VisibleExperiencia)
                        {
                            @*<CVExperiencia ListaExperiencia="@ListaExperiencia" ListaExperienciaChanged="@ListaExperienciaChanged" IdCurriculum="@curriculum.IdCurriculum"></CVExperiencia>*@
                        }
                    </BSRow>
                    <br />
                    <BSRow Class="fixed-bottom, float-right, ml-4, mr-4">
                        <ButonesFondo Navigation="@Navigation" Inicio="IrPaginaInicio" Atras="@(() => IrTabAnterior(refExperiencia))" Listo="@(() => IrTabSiguiente(refExperiencia))"></ButonesFondo>
                    </BSRow>

                </BSTabContent>
            </BSTab>
            <BSTab Id="Maquinaria" Name="MaquinariaName" @ref="refMaquinarias">
                <BSTabLabel Class="small">Carnés de Maquinarias</BSTabLabel>
                <BSTabContent Class="jumbotron">
                    <br />
                    <BSRow style="height:370px!important">
                        @*<CVMaquinaria PermisoData="@PermisoData" PermisoDataChanged="PermisoDataChanged"></CVMaquinaria>*@
                    </BSRow>
                    <BSRow Class="fixed-bottom, float-right, ml-4, mr-4">
                        <ButonesFondo Navigation="@Navigation" Inicio="IrPaginaInicio" Atras="@(() => IrTabAnterior(refMaquinarias))" Listo="@(() => IrTabSiguiente(refMaquinarias))"></ButonesFondo>
                    </BSRow>
                </BSTabContent>
            </BSTab>
            <BSTab Id="Formacion" @ref="refFormacion" Name="FormacionName">
                <BSTabLabel Class="small">Nivel Formativo</BSTabLabel>
                <BSTabContent Class="jumbotron">
                    <br />
                    <BSRow style="height:370px!important">
                        @*<CVFormacion NivelFormacion="@NivelFormacion" NivelFormacionChanged="@NivelFormacionChanged" ListaNivelFormativo="@ListaNivelFormativo"></CVFormacion>*@
                    </BSRow>
                    <BSRow Class="fixed-bottom, float-right, ml-4, mr-4">
                        <ButonesFondo Navigation="@Navigation" Inicio="IrPaginaInicio" Atras="@(() => IrTabAnterior(refFormacion))" Listo="@(() => IrTabSiguiente(refFormacion))"></ButonesFondo>
                    </BSRow>
                </BSTabContent>
            </BSTab>
            <BSTab Id="Otros" Name="OtrosName" @ref="refOtros">
                <BSTabLabel Class="small">Otros datos</BSTabLabel>
                <BSTabContent>
                    <br />
                    <BSRow style="height:370px!important">

                        <EditForm Model="@curriculum" class="w-100">
                            <BSRow>
                                <BSCol>
                                    <BSLabel For="Movilidad">Movilidad</BSLabel>
                                    <BSInput InputType="InputType.Text" Id="Movilidad" @bind-Value="@curriculum.Movilidad"></BSInput>
                                </BSCol>
                                <BSCol>
                                    <BSLabel For="AlojamientoPropio">¿Tienes alojamiento propio?</BSLabel>
                                    <BSInput InputType="InputType.Text" Id="Alojamiento" @bind-Value="@curriculum.AlojamientoPropio"></BSInput>
                                </BSCol>

                            </BSRow>
                            <br />

                            <BSRow Class="align-content-center">
                                <BSCol>
                                    <BSFormGroup>
                                        <BSLabel For="exampleFormControlSelect1">¿Qué disponibilidad tienes?</BSLabel>
                                        <BSBasicInput Id="exampleFormControlSelect1" InputType="InputType.Select" Value="@curriculum.Disponibilidad" ValueChanged="@((string e) => SeleccioneIntervalo(e))">
                                            <option value="" selected>Seleccione una opcion...</option>
                                            <option value="15dias">En 15 días</option>
                                            <option value="hoy">Inmediatamente</option>
                                            <option value="intervalo">En el período siguiente:</option>

                                        </BSBasicInput>
                                    </BSFormGroup>
                                </BSCol>
                                <BSCol>
                                    @if (isSelected)
                                    {
                                        <BSFormGroup>
                                            
                                            <BSLabel style="height:10px"></BSLabel>
                                            <DateRangePicker>
                                                <PickerTemplate Context="NewContext">
                                                    <div id="@NewContext.ParentId" @onclick="NewContext.Toggle" style="background: #fff; cursor: pointer; padding: 5px 10px; width: 100%; border: 1px solid #ccc; border-radius: 3px;">
                                                        <i class="oi oi-calendar"></i>&nbsp;
                                                        <span>@NewContext.FormattedRange @(string.IsNullOrEmpty(NewContext.FormattedRange) ? "Selecciona las fechas..." : "")</span>
                                                        <i class="oi oi-chevron-bottom float-right"></i>
                                                    </div>
                                                </PickerTemplate>
                                            </DateRangePicker>
                                        </BSFormGroup>
                                    }
                                </BSCol>

                            </BSRow>

                        </EditForm>
                    </BSRow>

                    <BSRow Class="fixed-bottom, float-right, ml-4, mr-4">
                        <ButonesFondo Navigation="@Navigation" Inicio="IrPaginaInicio" Atras="@(() => IrTabAnterior(refOtros))" Listo="@(() => IrTabSiguiente(refOtros))"></ButonesFondo>
                    </BSRow>
                </BSTabContent>
            </BSTab>
            @*<BSTab Id="Permisos" Name="PermisosName" @ref="refPermisos">
                    <BSTabLabel Class="small">Permisos</BSTabLabel>
                    <BSTabContent>
                        <br />
                        <BSRow style="height:370px!important">

                        </BSRow>

                        <BSRow Class="fixed-bottom, float-right, ml-4, mr-4">
                            <ButonesFondo Navigation="@Navigation" Inicio="IrPaginaInicio" Atras="@(() => IrTabAnterior(refPermisos))" Listo="@(() => IrTabSiguiente(refPermisos))"></ButonesFondo>
                        </BSRow>

                    </BSTabContent>
                </BSTab>*@
        </BSTabList>
        <BSTabSelectedContent />

    </BSTabGroup>
</BSContainer>

@code {
    [Parameter] public string Id { get; set; }
    public Persona Persona { get; set; } = new Persona();
    private Permiso PermisoData { get; set; }
    private Formacion FormacionData { get; set; }
    private Experiencia ExperienciaData { get; set; }
    [System.Diagnostics.CodeAnalysis.MaybeNull]
    private Curriculum curriculum { get; set; } = new Curriculum();
    private HttpClient client;
    EditContext EditContext { get; set; }
    Formacion NivelFormacion { get; set; }
    List<Experiencia> ListaExperiencia { get; set; }
    List<EstudiosPorNiveles> ListaNivelFormativo { get; set; }
    BSTab refExperiencia { get; set; }
    BSTab refDatosPersonales { get; set; }
    BSTab refFormacion { get; set; }
    BSTab refOtros { get; set; }
    BSTab refPermisos { get; set; }
    BSTab refMaquinarias { get; set; }
    BSTabList refTabList { get; set; }
    BSTabGroup refTabGroup { get; set; }
    BSDropdownItem inmediata { get; set; }
    BSDropdownItem dias15 { get; set; }
    BSDropdownItem intervalo { get; set; }
    bool DatosPersonalesName { get; set; }
    bool ActivarInmediata { get; set; }
    DateRangePicker context;
    bool panel { get; set; } = true;
    bool VisibleFormacion { get; set; } = false;
    bool VisibleExperiencia { get; set; } = false;
    public IEnumerable<string> Provincias { get; set; } = new List<string>();
    public IEnumerable<string> Municipios { get; set; } = new List<string>();
    private bool nuevo { get; set; }
    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddMonths(-1);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);
    TimeSpan? EntreFechas { get; set; }
    string EntreFechas2 { get; set; }
    bool isSelected { get; set; }

    async Task PermisoDataChanged(Permiso permiso)
    {
        try
        {
            await SQLDBServices.UpdatePermisos(permiso);
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc.Message);
            throw;
        }
        await InvokeAsync(() => StateHasChanged());
    }

    async Task NivelFormacionChanged()
    {
        try
        {

            if (await SQLDBServices.FormacionPorId(NivelFormacion.IdFormacion) != null)
            {
                await SQLDBServices.UpdateFormacion(NivelFormacion);
            }
            else
            {
                await SQLDBServices.AddFormacion(NivelFormacion);
            }


            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc.Message);
            throw;
        }
    }

    async Task ListaExperienciaChanged()
    {
        try
        {
            var oldExperiencia = await SQLDBServices.ExperienciaPorIdPersona(Id);
            foreach (var item in oldExperiencia)
            {
                await SQLDBServices.DeleteExperiencia(item);
            }

            foreach (var item in ListaExperiencia)
            {
                if (await SQLDBServices.GetExperiencia(item.IdExperiencia) != null)
                {
                    await SQLDBServices.UpdateExperiencia(item);
                }
                else
                {
                    await SQLDBServices.AddExperiencia(item);
                }

            }
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc.Message);
            throw;
        }
    }

    protected async Task MunicipioSegunProvincia(string nombreProvincia)
    {
        Municipios = await client.GetFromJsonAsync<List<string>>("Provincias?provincias=" + nombreProvincia);
        await InvokeAsync(() => StateHasChanged());
    }

    async Task PersonaChanged(Persona persona)
    {
        try
        {
            if (nuevo)
            {
                var respsta = await client.PostAsJsonAsync<Persona>("Personas", persona);
            }
            else
            {

                var estado = await client.PutAsJsonAsync<Persona>("Personas/" + Id, persona);
                if(estado.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    
                }
            }
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
            throw;
        }
    }

    public void OnRangeSelect(DateRange range)
    {
        StartDate = range.Start;
        EndDate = range.End;
        EntreFechas = EndDate - StartDate;
    }
    void SeleccioneIntervalo(string item)
    {
        curriculum.Disponibilidad = item;
        if (item == "intervalo")
        {
            isSelected = true;
        }
        else
        {
            isSelected = false;
        }
    }

    void EditarFormacion(Formacion groupItem)
    {
        VisibleFormacion = true;
        VisibleExperiencia = false;
        panel = false;
        FormacionData = groupItem;
    }

    async void NuevaFormacion()
    {
        try
        {
            VisibleFormacion = true;
            VisibleExperiencia = false;
            panel = false;

            FormacionData = new Formacion { IdFormacion = Guid.NewGuid().ToString(), IdCurriculum = curriculum.IdCurriculum, Titulo = string.Empty };
            var result = await SQLDBServices.AddFormacion(FormacionData);
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc);
            throw;
        }
    }

    async void FieldChanged(object sender, FieldChangedEventArgs args)
    {
        await PersonaChanged(Persona);
    }

    async void IrPaginaInicio(MouseEventArgs args)
    {

        await PersonaChanged(Persona);
        Navigation.NavigateTo("/Candidato");
        await InvokeAsync(() => StateHasChanged());
    }

    async void IrTabAnterior(BSTab bSTab)
    {
        await PersonaChanged(Persona);
        var render = refTabGroup.Tabs.FindIndex(t => t.Name == bSTab.Name);
        if (render != 0)
        {
            refTabGroup.Tabs[render - 1].Select();
        }
    }

    async void IrTabSiguiente(BSTab bSTab)
    {
        await PersonaChanged(Persona);
        var render = refTabGroup.Tabs.FindIndex(t => t.Name == bSTab.Name);
        if (render != refTabGroup.Tabs.Count() - 1)
        {
            refTabGroup.Tabs[render + 1].Select();
        }
        if (bSTab.Name == "OtrosName")
        {
            Navigation.NavigateTo("/BuscarOfertas/" + Id);
        }
    }

    void NuevaExperiencia(bool e)
    {
        try
        {
            VisibleExperiencia = e;
        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc);
            throw;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await Provider.GetAuthenticationStateAsync();
        var user = authState.User;
        client = Factory.CreateClient("clientFirst");
        try
        {
            Provincias = await client.GetFromJsonAsync<IEnumerable<string>>("Provincias");
            Persona = await client.GetFromJsonAsync<Persona>("Personas/" + Id);
            if (Persona.ProvinciaResidencia != null)
            {
                Municipios = await client.GetFromJsonAsync<IEnumerable<string>>("Provincias/" + Persona.ProvinciaResidencia);
            }

            if (Persona.CorreoElectronico == null)
            {
                nuevo = true;
                Persona = new Persona
                {
                    IdPersona = Id,
                    Nombre = string.Empty,
                    PrimerApellido = string.Empty,
                    Sexo = string.Empty,
                    CorreoElectronico = authState.User.Identity.Name
                };

            }
            curriculum = await SQLDBServices.GetCurriculumPorIdPersona(Id);
            NivelFormacion = await SQLDBServices.FormacionPorIdPersona(Id);
            ListaExperiencia = await SQLDBServices.ExperienciaPorIdPersona(Id);
            ListaNivelFormativo = await SQLDBServices.NivelesFormativo();
           
            NivelFormacion = NivelFormacion ?? new Formacion();
            ListaExperiencia = ListaExperiencia ?? new List<Experiencia>();
            ListaNivelFormativo = ListaNivelFormativo ?? new List<EstudiosPorNiveles>();
            PermisoData = PermisoData ?? new Permiso { IdPermisos = Guid.NewGuid().ToString(), IdPersona = Id, Tipo = string.Empty };
            await InvokeAsync(() => StateHasChanged());




        }
        catch (Exception exc)
        {
            System.Diagnostics.Debug.WriteLine(exc);
            throw;
        }
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Persona);
        this.EditContext.OnFieldChanged += FieldChanged;
        await base.OnInitializedAsync();
    }
}
