<BSContainer IsFluid="true">
    <BSAlert Color="Color.Info">Seleccione la máxima formación alcanzada:</BSAlert>
    
    <BSBasicForm IsInline="true">
        <BSFormGroup IsCheck="true" IsRow="true"  Class="justify-content-start w-100" >
            <BSCol SM="6">
                <BSBasicInput InputType="InputType.Select" Class="w-100" Value="@selectedValue" ValueChanged="@((string valor)  => CategoriaSelected(valor) )">
                    <option value="" selected></option>
                    @foreach (var item in Nivel1)
                    {
                        @if (item == selectedValue)
                        {
                            <option value="@item" selected>@item</option>
                        }
                        else
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </BSBasicInput>
            </BSCol>
            @if (formacionData != null)
            {
            <BSCol SM="6">
                <BSBasicInput InputType="InputType.Select" Class="w-100" Value="@selectedFamilia" ValueChanged="@((string familia) => SelectNivel2(familia))">
                    <option value="" selected>Selecciona el nivel...</option>
                    @foreach (var item in formacionData.SubCategoria.Distinct())
                    {
                        @if (item == selectedFamilia)
                        {
                            <option value="@item" selected>@item</option>
                        }
                        else
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </BSBasicInput>
            </BSCol>
            }
        </BSFormGroup>
    </BSBasicForm>
</BSContainer>

@code {

    List<string> Nivel1 { get; set; } = new List<string>();
    [Parameter]
    public Formacion NivelFormacion { get; set; }
    [Parameter]
    public EventCallback<Formacion> NivelFormacionChanged { get; set; }
    [Parameter]
    public string IdCurriculum { get; set; }

    [Parameter]
    public List<EstudiosPorNiveles> ListaNivelFormativo { get; set; }

    public string selectedValue { get; set; }
    public string selectedFamilia { get; set; }
    FormacionData formacionData { get; set; }

    protected override void OnInitialized()
    {
        Nivel1 = new List<string> { "Básica", "ESO", "Bachillerato", "FP Grado Medio", "FP Grado Superior", "Grado Universitario" };
        if(NivelFormacion != null)
        {
            selectedValue = NivelFormacion.Titulo;
            selectedFamilia = NivelFormacion.Descripcion ?? null;
            if(selectedValue == Nivel1[3] || selectedValue == Nivel1[4] || selectedValue == Nivel1[5])
            {
                formacionData = new FormacionData { Categoria = selectedValue, SubCategoria = ListaNivelFormativo.Where(l => l.NivelFormativo == selectedValue).Select(l => l.Familia).Distinct().ToList() };
            }
            else
            {
                formacionData = null;
            }
        }
    }

    async void CategoriaSelected(string item)
    {        
        selectedValue = item;
        NivelFormacion.Titulo = item;
        if (item == Nivel1[3] || item == Nivel1[4] || item == Nivel1[5])
        {

            formacionData = new FormacionData { Categoria = selectedValue, SubCategoria = ListaNivelFormativo.Where(l => l.NivelFormativo == selectedValue).Select(l => l.Familia).Distinct().ToList() };
        }
        else
        {
            formacionData = null;
            NivelFormacion.Descripcion = null;
        }
        await InvokeAsync(() => StateHasChanged());
        await NivelFormacionChanged.InvokeAsync(NivelFormacion);
    }

    async Task SelectNivel2(string subcategoria)
    {

        //var nivel = (NivelFormacion.Titulo == selectedValue) ? NivelFormacion : null;
        //if (nivel == null)
        //{
        //    NivelFormacion = new Formacion
        //    {
        //        IdFormacion = Guid.NewGuid().ToString(),
        //        IdCurriculum = IdCurriculum,
        //        IdCurriculumNavigation = null,
        //        Titulo = selectedValue,
        //        Descripcion = subcategoria
        //    };
        //}

        selectedFamilia = subcategoria;
        NivelFormacion.Descripcion = selectedFamilia;
        await InvokeAsync(() => StateHasChanged());
        await NivelFormacionChanged.InvokeAsync(NivelFormacion);
    }

    public class FormacionData
    {
        public FormacionData()
        {
            this.SubCategoria = new List<string>();

        }
        public string Categoria { get; set; }
        public List<string> SubCategoria { get; set; }
    }
}
