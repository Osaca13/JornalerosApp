@*@page "/BuscarOfertas/"
@page "/BuscarOfertas/{id}"*@
@using JornalerosApp.Shared.Models
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json;
@inject JornalerosApp.Shared.Services.ISQLDatabaseServices SqlDbServices
@inject AuthenticationStateProvider Provider
@inject IHttpClientFactory Factory
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation

<AuthorizeView Roles="Candidato, Admin">
    <Authorized Context="authState">
        <BSJumbotron Class="pt-4" style="height:300px">
            <BSAlert Color="Color.None" Class="h3" style="text-align:center; display:block">Ofertas </BSAlert>
            <BSForm Model="@searchParameters">
                <BSFormGroup IsRow="true">
                    <BSCol SM="4">
                        <BSLabel For="Actividad">Actividad</BSLabel>
                        <BSBasicInput InputType="InputType.Text" Id="Actividad" @bind-Value="@searchParameters.Actividad" />
                    </BSCol>
                    <BSCol SM="4">
                        <BSLabel For="Lugar">Lugar</BSLabel>
                        <BSBasicInput InputType="InputType.Text" Id="Lugar" @bind-Value="@searchParameters.Lugar" />
                    </BSCol>
                    <BSCol SM="4">
                        <BSLabel For="Sector">Sector Agrícola</BSLabel>
                        <BSBasicInput InputType="InputType.Select" Id="Sector" @bind-Value="@searchParameters.Sector">
                            @foreach (var item in Sectores)
                            {
                                <option value="@item">@item</option>
                            }
                        </BSBasicInput>
                    </BSCol>
                </BSFormGroup>

                <BSFormGroup IsRow="true" Class="pt-5">
                    <BSCol >
                        <BSButton Size="Size.Large" IsBlock="true" ButtonType="ButtonType.Submit" @onclick="(() =>Busqueda())">Filtrar</BSButton>
                    </BSCol>
                </BSFormGroup>
            </BSForm>
        </BSJumbotron>
    </Authorized>
</AuthorizeView>

@if (ListaOfertas != null && ListaOfertas.Count > 0)
{
    <ListadoGenerico Listado=@ListaOfertas Titulo=@titulo>
        <ListadoConElementos>
            @if (Id != null)
            {
                <BSButton class="btn btn-dark" OnClick="CrearOferta">Crear nueva oferta</BSButton>
            }
            <BSTable class="table">
                <thead>
                    <tr>
                        <th>Titulo</th>
                        <th>Descripcion</th>
                        <th>Nombre de Empresa</th>
                        <th>Jornada</th>
                        <th></th>
                        <th></th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var oferta in ListaOfertas)
                    {
                        <tr>
                            <td>@oferta.Titulo</td>
                            <td>@oferta.Descripcion</td>
                            <td>@oferta.NombreEmpresa</td>
                            <td>@oferta.JornadaReal</td>
                            @if (Id == null)
                            {
                                <td><BSButton class="btn btn-info" OnClick="VerOferta">Ver detalles</BSButton></td>
                                <td><BSButton class="btn btn-info" OnClick="IncribirmeOferta">Inscribirme</BSButton></td>
                            }
                            else
                            {
                                <td><BSButton class="btn btn-info" OnClick="EditarOferta">Editar</BSButton></td>
                                <td><BSButton class="btn btn-danger" OnClick="EliminarOferta">Eliminar</BSButton></td>
                            }
                        </tr>
                    }
                </tbody>
            </BSTable>
        </ListadoConElementos>
    </ListadoGenerico>
}


@code {

    [Parameter]
    public string Id { get; set; }

    private List<ListaOferta> ListaOfertas { get; set; } = new List<ListaOferta>();
    private EmpresaModel empresa { get; set; } = new EmpresaModel();
    private Oferta oferta { get; set; } = new Oferta();
    private Search searchParameters { get; set; } = new Search();
    private HttpClient client;
    private System.Security.Claims.ClaimsPrincipal user { get; set; }
    private AuthenticationState authState { get; set; }
    private string titulo { get; set; }
    private List<string> Sectores { get; set; } = new List<string> { "Seleccione un sector...", "Cultivos Herbáceos e Industriales",
        "Frutas y Hortalizas", "Vitivinicultura", "Aceite de Oliva y Aceituna de Mesa", "Flores y Plantas Ornamentales"};

    protected override async Task OnParametersSetAsync()
    {
        authState = await Provider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    protected override async Task OnInitializedAsync()
    {
        client = Factory.CreateClient("clientFirst");


        if (Id != "NO")
        {
            ListaOfertas = await SqlDbServices.OfertasPorEmpresa(Id);
            titulo = "Mis ofertas";
        }
        else
        {
            titulo = "Listado de Ofertas";
        }

        StateHasChanged();

    }

    async Task Busqueda()
    {
        try
        {
            ListaOfertas = await SqlDbServices.OfertasPorParametros(searchParameters.Actividad, searchParameters.Lugar, searchParameters.Sector);

            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
            throw;
        }
    }

    void CrearOferta()
    {
        Navigation.NavigateTo("/NuevaOferta/" + Id);
    }
    void EditarOferta()
    {

    }
    void EliminarOferta()
    {

    }
    void IncribirmeOferta()
    {

    }
    void VerOferta()
    {

    }

}
