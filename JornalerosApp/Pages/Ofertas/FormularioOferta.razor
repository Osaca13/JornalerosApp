@using JornalerosApp.Pages.Shared
@inject IHttpClientFactory Factory


    <BSJumbotron>
        <EditForm Model="@Oferta" OnValidSubmit="@OnValidSubmit">
            <div class="form-group row">
                <div class="col">
                    <label>Nombre:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="@Oferta.Titulo" />
                        <ValidationMessage For="@(() => Oferta.Titulo)" />
                    </div>
                </div>
                <div class="col">
                    <label>Fecha Publicacion:</label>
                    <div>
                        <InputDate class="form-control" style="width:100%" @bind-Value="@Oferta.FechaPublicacion" @bind-Value:format="dd-mm-yy" placeholder="@temp" />
                        <ValidationMessage For="@(() => Oferta.FechaPublicacion)" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>Descripción:</label>
                <InputTextArea style="width:100%" @bind-Value="@Oferta.Descripcion" placeholder="Describa brevemente..."></InputTextArea>
            </div>
            <div class="form-group row">
                <div class="col">
                    <label>¿Tiene continuidad?:</label>                   
                    <InputCheckbox class="form-control" style="width:100%" Value="@ContinuidadIgualLabor" ValueChanged="@((bool e)=>ContinuidadIgual(e))" ValueExpression="@(() => ContinuidadIgualLabor)" />
                    <ValidationMessage For="@(() => Oferta.ContinuidadIgualLabor)" />                    
                </div>
                <div class="col">
                    <label>¿Hay continuidad en otra labor?</label>                    
                        <InputCheckbox class="form-control" style="width:100%" Value="@ContinuidadOtraLabor" ValueChanged="((bool e) => ContinuidadOtra(e))" ValueExpression="@(()=> ContinuidadIgualLabor)" />
                        <ValidationMessage For="@(() => Oferta.ContinuidadOtraLabor)" />
                    
                </div>
                <div class="col">
                    <label>¿Hay alojamiento?</label>
                    <div>
                        <InputCheckbox class="form-control" style="width:100%" Value="@Alojamiento" ValueChanged="@((bool e) => AlojamientoDisponible(e))" ValueExpression="@(() => Alojamiento)" />
                        <ValidationMessage For="@(() => Oferta.Alojamiento)" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>Lugar:</label>
                <div>
                    <InputSelectNumber class="form-control"
                                       ValueChanged="@((string value) => ValorPaisCambiado(value))"
                                       ValueExpression="@(() => Oferta.LugarTrabajo)"
                                       Value="@Oferta.LugarTrabajo">
                        <option value="0">--Seleccione un país--</option>
                        @foreach (var item in Lugar)
                        {
                            @if (Oferta.LugarTrabajo == item)
                            {
                                <option selected value="@item">@item</option>
                            }
                            else
                            {
                                <option value="@item">@item</option>
                            }
                        }
                    </InputSelectNumber>
                </div>
            </div>

            <div class="form-group">
                <label>Provincia:</label>
                <div>
                    <InputSelectNumber class="form-control" @bind-Value="@Oferta.Provincia">
                        <option value="0">--Seleccione un estado--</option>
                        @foreach (var item in Provincias)
                        {
                            @if (Oferta.Provincia == item)
                            {
                                <option selected value="@item">@item</option>
                            }
                            else
                            {
                                <option value="@item">@item</option>
                            }
                        }
                    </InputSelectNumber>
                    <ValidationMessage For="@(() => Oferta.Provincia)" />
                </div>
            </div>
            <BSButtonGroup IsToolbar="true">
                <BSButtonGroup Class="mr-sm-4">
                    <BSButton Value="Submit" Color="Color.Success" Size="Size.Large">Guardar</BSButton>
                </BSButtonGroup>
                <BSButtonGroup Class="mr-sm-4">
                    <BSButton Value="Reset" Color="Color.Warning" Size="Size.Large">Cancelar</BSButton>
                </BSButtonGroup>
            </BSButtonGroup>
            <DataAnnotationsValidator />
        </EditForm>
    </BSJumbotron>

@code {
    [Parameter] public Oferta Oferta { get; set; } = new Oferta();
    [Parameter] public String TextoBoton { get; set; } = "Salvar cambios";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private DateTime temp { get; set; } = DateTime.Now;
    private string titulo { get; set; }
    List<string> Provincias = new List<string>();
    List<string> Lugar = new List<string>();
    private HttpClient client;
    bool ContinuidadIgualLabor { get; set; }
    bool ContinuidadOtraLabor { get; set; }
    bool Alojamiento { get; set; }


    protected override async Task OnInitializedAsync()
    {

        if (Oferta.Provincia != null)
        {
            client = Factory.CreateClient("clientFirst");
            Provincias = await client.GetFromJsonAsync<List<string>>("Provincias");
        }
    }

    private async Task ValorPaisCambiado(string value)
    {
        await InvokeAsync(StateHasChanged);

        if (value == string.Empty)
        {

        }
        else
        {
            Lugar = await client.GetFromJsonAsync<List<string>>("Provincias/" + value);
            //await CargarEstados(value);
        }
    }

    private void ContinuidadIgual(bool e)
    {
        ContinuidadIgualLabor = e;
        Oferta.ContinuidadIgualLabor = (ContinuidadIgualLabor ==  true)? "si" : "no";

    }

    private void ContinuidadOtra(bool e)
    {

        ContinuidadOtraLabor = e;
        Oferta.ContinuidadOtraLabor = (ContinuidadOtraLabor == true) ? "si" : "no";
    }

    private void AlojamientoDisponible(bool e)
    {
        Alojamiento = e;
        Oferta.Alojamiento = (Alojamiento == true) ? "si" : "no";
    }

    //private async Task CargarEstados(string paisId)
    //{
    //    //Estados = await http.GetJsonAsync<List<Estado>>($"api/paises/{paisId}/estados");
    //}
}



